#!/usr/bin/env bash

SCRIPT=$(realpath "$0")
SCRIPT_PATH=$(dirname "$SCRIPT")
PID_PATH="${SCRIPT_PATH}/.pid"
LOG_PATH="${SCRIPT_PATH}/run.log"
SWAGGER_TO_GQL="${SCRIPT_PATH}/../node_modules/.bin/swagger-to-graphql"
KONG_GQL_SERVER="${SCRIPT_PATH}/../src/kongql-server.js"

GRAPHQL_SWAGGER_URL=${GRAPHQL_SWAGGER_URL:-https://petstore.swagger.io/v2/swagger.json}
function parse_args() {
  ACTION=$1
  shift

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --swagger)
        GRAPHQL_SWAGGER_URL=$2
        ;;
      *)
        ;;
    esac
    shift
  done
}

function instructions() {
cat << EOF

  Usage: kongql <command> --<option>

  Commands:
    start       start GraphQL server
    stop        stop running GrapghQL server
    status      show status of the server

  Options:
    --swagger   URL or PATH of swagger file

EOF
}

function is_swagger_file_valid() {
  "$SWAGGER_TO_GQL" "--swagger=${GRAPHQL_SWAGGER_URL}" > /dev/null
  return $?
}


function start_server() {
  if is_server_running; then
    echo "server is already running"
    exit 0
  fi

  if is_swagger_file_valid; then
    export GRAPHQL_SWAGGER_URL
    nohup "$KONG_GQL_SERVER" >> "${LOG_PATH}" &
    echo "$!" > "$PID_PATH"
  else
    echo "error occured cannot start the server..."
    cat "${LOG_PATH}"
    exit 1
  fi
}


function is_server_running() {
  [[ -f "${PID_PATH}" ]] && [[ -n $(ps -p "$(cat "${PID_PATH}")") ]] && return 0
  return 1
}

function stop_server() {
  [[ -f "${PID_PATH}" ]] && kill -9 "$(cat "${PID_PATH}")" && rm "${PID_PATH}"
}


function main() {
  parse_args "$@"

  case $ACTION in
    start)
        echo "starting the server..."
        start_server
        echo "server is running"
      ;;
    stop)
        echo "stopping the server..."
        stop_server
        echo "server is stopped"
      ;;
    status)
        if is_server_running; then
          echo "server is running"
        else
          echo "server is not running"
        fi
      ;;
    *)
      instructions
      exit 1
      ;;
  esac

}

main "$@"
